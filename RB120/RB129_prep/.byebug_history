quit
n
tasks
n
complete_task
n
continue
hand.rank.uniq.length == 2
hand.rank.uniq.length
hand.rank.uniq
hand.rank.each_with_object(Hash.new { 0 }) { |ele, hash| hash[ele] += 1 }.values.include? 3
hand.evaluate
continue
hand.rank.sum == [*min..max].sum
hand.rank.sum == [*min..max]
hand.rank.sum == [*min..max] && hand.suits.uniq.length == 1
max = hand.rank.max
min = hand.rank.min
hand.evaluate
continue
hand.evaluate
hand.suits[3] = "Hearts"
hand.suits[4] = "Hearts"
hand.suits[1] = "Hearts"
hand.suits
hand.evaluate
hand.rank
hand.rank[3] = 8
hand.rank[2] = 6
hand.rank
continue
hand.suits.uniq
hand.suits
hand.evaluate
hand.rank
hand.rank[3] = 10
hand.rank
hand.rank[3] = 13
hand.rank[2] = 14
hand.rank
hand.suits
hand.suits[4] = "Hearts"
hand.suits[3] = "Hearts"
hand.suits
continue
hand.suits
hand
continue
guess
n
guess
n
queue.queue.select { |ele| ele.class == QueuedObject }.inject { |acc, obj| acc.time < obj.time ? acc : obj }
queue.queue
n
queue.queue.select { |ele| ele.class == QueuedObject }.inject { |acc, obj| acc.time < obj.time ? acc : obj }
queue.queue[1]
queue.to_a
n
queue.to_a
n
queue.to_a
n
queue.to_a
n
queue.to_a
n
queue.to_a
n
queue.to_a
quit
queue
n
queue
n
queue
n
queue
quit
queue.dequeue
@queue.select { |ele| ele.class == QueuedObject }.inject { |acc, obj| acc.time < obj.time ? acc : obj }
n
queue
n
quit
queue
n
queue
n
