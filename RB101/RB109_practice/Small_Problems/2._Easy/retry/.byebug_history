continue
n
continue
DIGITS
DIGITS[1]
DIGITS[remainder]
remainder
n
integer
n
integer
continue
ele
n
ele
n
continue
array.map { |ele| count += ele }
array
a
a2
n
a
a2
n
a
a2
n
a
a2
n
a2
a
n
a
a2
continue
arr1
a
a2
continue
f
c
continue
\b
b
arr1
b
a
continue
largest_sum
n
combination
continue
array.length
continue
result
result << array[0][:name] + ", "
result
n
array[0][:name]
array[0]
array
continue
1400 - 686
1400 - 754
(hours.to_i * MINUTES_PER_HOUR + minutes.to_i)
60 - minutes.to_i
minutes
hours
((24 - hours.to_i) * MINUTES_PER_HOUR + minutes.to_i)
1400 - 754
(hours.to_i * MINUTES_PER_HOUR + minutes.to_i)
minutes
hours
n
time
n
minutes
hours
n
time
n
"-" << integer_to_string(-integer)
n
"+" << integer_to_string(integer)
integer_to_string(integer)
n
continue
n
integer <=> 0
n
integer
continue
n
integer
n
integer
continue
string[1..-1]
string[1]
string[1, -1]
string
string[1, -1]
-string_to_integer(string[1, -1])
string
continue
string
n
string
n
string
ele
n
ele
string
n
string
n
string
continue
ele_to_num(ele)
ele_to_num(ele) * (10 ** (counter - 1))
ele
string
continue
number[-1]
n
number
n
["11", "12", "13"].include?(number[-2, 2])
number
n
number
continue
string_to_integer(string[1, string.length-1])
string
string_to_integer(string[1, string.length-2])
n
["-", "+"].include?(string[0])
n
continue
["-", "+"] == string[0
string
n
string
