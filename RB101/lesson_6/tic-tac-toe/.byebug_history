continue
n
board
(1..9).each { |num| board[num] = :O }
board
continue
n
display_board(board)
board[4] = :X
display_board(board)
board[3] = :X
board[7] = :C
board[8] = :X
board[5] = :C
board[9] = :X
board[6] = :C
board[5] = :X
board[4] = :C
board[3] = :C
board[2] = :C
continue
computer_won?(COMPUTER_MARKER, board)
display_board(board)
board
n
board
n
board[7] = :C
board[5] = :C
board[3] = :C
n
board[3] = :X
board[2] = :X
board_full?(board)
player_won?(PLAYER_MARKER, board)
n
player_won?(PLAYER_MARKER, board)
player_won?(PLAYER_MARKER, board
n
display_board(board)
n
display_board(board)
n
next
board
next
board
next
continue
computer_defense(board)
n
continue
subarray[1]
subarray
continue
subarray
player_combinations
    end
      threats << subarray[1] if subarray == combination
    player_combinations.each do |combination|
  THREATENING_COMBINATIONS.each do |subarray|
player_combinations
player_positions
n
nest
skip
player_positions
skip
n
player_combinations
player_positions
continue
threats
n
threats
n
player_combinations = player_positions.combination(2).to_a
player_positions
player_positions = board.select { |key, _| board[key] == PLAYER_MARKER }.keys.to_a
player_combinations = player_positions.keys.combination(2).to_a
player_combinations
n
player_positions = board.select { |key, _| board[key] == PLAYER_MARKER }.to_a
board.select { |position| position == PLAYER_MARKER }
board
player_positions
n
continue
board
computer_defense(board)
n
continue
board.select { |key, _| board[key] == EMPTY_MARKER }.keys
board.select { |key, _| board[key] == EMPTY_MARKER }
continue
board.select { |key, _| board[key] == EMPTY_MARKER }[1] == " " 
board.select { |key, _| board[key] == EMPTY_MARKER }[10] == " " 
board.select { |key, _| board[key] == EMPTY_MARKER }.include?(move)
board.select { |key, _| board[key] == EMPTY_MARKER }
continue
next
continue
(threats.length == 1 && board[threats[0]] == :O)
(threats.length == 1 && board[threats] == :O)
threats
n
next
skip
board
continue
skip
n
skip
n
computer_wins
n
board
n
skip
board
n
skip
n
move
n
board
potential_moves
n
nn
n
continue
board
potential_moves
n
potential_moves
n
continue
combinations
potential_moves
n
potential_moves
THREATENING_COMBINATIONS.each { |subarray| potential_moves << subarray[1] if combinations.include?(subarray) }
potential_moves
board
n
subarray
potential_moves
n
continue
potential_moves
n
THREATENING_COMBINATIONS
board
n
continue
n
board.values.none? { |value| value == " " }
continue
board.values.none? { |value| value == " " }
continue
board.values.none? { |value| value == " " }
board
continue
n
board.values.none? { |value| value == " " }
board
n
continue
board["2"] == " "
board[player_move] == " "
board[player_move] = " "
player_move
continue
board
n
board
n
board
n
board
n
board[row.to_i][column.to_i] == :O
column
row
board
