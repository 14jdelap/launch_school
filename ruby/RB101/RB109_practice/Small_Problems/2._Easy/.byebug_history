q
continue
num % 3
num
ending
starting
q
continue
(array.inject { |acc, ele| acc * ele }/array.length.to_f)
(array.inject { |acc, ele| acc * ele }/array.length).to_f
(array.inject { |acc, ele| acc * ele }/array.length)
array
q
n
ele
result
n
result
n
result
n
result
n
q
continue
ele
ele.ord > 96 ? (ele.ord - 32).chr : (ele.ord + 32).chr
=> 109:     ele.ord > 96 ? (ele.ord - 32).chr : 
ele
n
84.chr
ele.ord-32
ele.ord
ele
n
ele
n
string
ele
string
skip
n
q
continue
n
array.length
counter
n
counter
array.length
counter
n
array[counter]
value
n
value
array
q
smaller
larger
n
larger + smaller
smaller
larger
q
continue
counter
larger + smaller
n
nn
n
integer
continue
integer
continue
(remainder.to_f * 0.60).to_s.split(".")
(remainder.to_f * 0.60).to_s
(remainder.to_f * 0.60)
remainder
n
remainder
(remainder.to_f * 0.60)
continue
(remainder.to_f * 0.60)
(remainder.to_f * 60)
degrees
remainder
continue
minutes
continue
format('%dº%02d\'%02d\\"', degrees.to_i, minutes.to_i, seconds.to_i)
format('%dº%02d\'%02d\"', degrees.to_i, minutes.to_i, seconds.to_i)
format('%dº%02d\'%02d\', degrees.to_i, minutes.to_i, seconds.to_i)
format('%dº%02d\'%02d', degrees.to_i, minutes.to_i, seconds.to_i)
format('%dº%02d\'%02d"', degrees.to_i, minutes.to_i, seconds.to_i)
continue
n
result
n
e
result
n
e
n
i
e
array
continue
result
resukt
n
array_digits[digit].to_i
n
result
n
array_digits[digit].to_i
continue
digit
continue
result
n
array_digits
result
n
integer
map
num
n
